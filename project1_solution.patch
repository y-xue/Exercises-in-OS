diff --git a/include/ProcessInfo.h b/include/ProcessInfo.h
new file mode 100644
index 0000000..dadd7b9
--- /dev/null
+++ b/include/ProcessInfo.h
@@ -0,0 +1,15 @@
+#ifndef _PROCESSINFO_H_
+#define _PROCESSINFO_H_
+#include "types.h"
+
+struct ProcessInfo {
+   int pid; // process id
+   int ppid; // parent pid
+   int state; // state
+   uint sz; // size in bytes
+   char name[16]; // name of process
+ };
+
+#endif //_PROCESSINFO_H_
+
+
diff --git a/include/syscall.h b/include/syscall.h
index c55cec2..c56b46f 100644
--- a/include/syscall.h
+++ b/include/syscall.h
@@ -23,5 +23,6 @@
 #define SYS_sbrk   19
 #define SYS_sleep  20
 #define SYS_uptime 21
+#define SYS_getprocs 22
 
 #endif // _SYSCALL_H_
diff --git a/kernel/defs.h b/kernel/defs.h
index c12f8ff..c6e010d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -9,6 +9,7 @@ struct pipe;
 struct proc;
 struct spinlock;
 struct stat;
+struct ProcessInfo;
 
 // bio.c
 void            binit(void);
@@ -109,6 +110,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             getprocs(struct ProcessInfo*);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/kernel/exec.c b/kernel/exec.c
index 05f80f8..c5a6baf 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -9,6 +9,7 @@
 int
 exec(char *path, char **argv)
 {
+  cprintf("exec (%s,%s)\n",path,*argv);
   char *s, *last;
   int i, off;
   uint argc, sz, sp, ustack[3+MAXARG+1];
@@ -80,6 +81,8 @@ exec(char *path, char **argv)
       last = s+1;
   safestrcpy(proc->name, last, sizeof(proc->name));
 
+  cprintf("Commiting to the user image: proc.name = %s\n",proc->name);
+  cprintf("The context eip is set to the corresponding main file: %s.c\n",proc->name);
   // Commit to the user image.
   oldpgdir = proc->pgdir;
   proc->pgdir = pgdir;
diff --git a/kernel/proc.c b/kernel/proc.c
index 8e20984..c98a82b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "ProcessInfo.h"
 
 struct {
   struct spinlock lock;
@@ -75,6 +76,7 @@ found:
 void
 userinit(void)
 {
+  cprintf("userinit \n");
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
   
@@ -96,7 +98,10 @@ userinit(void)
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
-
+  cprintf("creates a process called [initcode] whose state is RUNNABLE,\n");
+  cprintf("and the context eip is set to the beginning of initcode.S.\n");
+  cprintf("When the process [initcode] is switched to run,\n");
+  cprintf("the syscall [SYS_exec]in initcode.S will be executed.\n");
   p->state = RUNNABLE;
   release(&ptable.lock);
 }
@@ -256,10 +261,14 @@ void
 scheduler(void)
 {
   struct proc *p;
-
+  cprintf("scheduler\n");
+  // int i = 0;
   for(;;){
+    // cprintf("%d\n",i);
     // Enable interrupts on this processor.
     sti();
+    // for (; i < 10; i++)
+      // cprintf("%d\n",i);
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
@@ -271,6 +280,7 @@ scheduler(void)
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       proc = p;
+      // cprintf("%d  %d  %s\n",p->pid,p->state,p->name);
       switchuvm(p);
       p->state = RUNNING;
       swtch(&cpu->scheduler, proc->context);
@@ -283,6 +293,7 @@ scheduler(void)
     release(&ptable.lock);
 
   }
+  // cprintf("end sheduler\n");
 }
 
 // Enter scheduler.  Must hold only ptable.lock
@@ -443,4 +454,26 @@ procdump(void)
   }
 }
 
+int getprocs(struct ProcessInfo processInfoTable[])
+{
+  struct proc *p;
+  int i;
+  int cnt = 0;
+  // cprintf("getprocs\n");
+  for (p = ptable.proc, i = 0; p < &ptable.proc[NPROC]; p++, i++) {
+    if (p->state == UNUSED) continue;
+    processInfoTable[i].pid = p->pid;
+    // cprintf("%d: %d\n", i, p->pid);
+    // The parent process id of the first process is meaningless
+    processInfoTable[i].ppid = (i == 0) ? -1 : p->parent->pid;
+    processInfoTable[i].state = p->state;
+    // cprintf("%d\n",p->state);
+    processInfoTable[i].sz = p->sz;
+    strncpy(processInfoTable[i].name, p->name, 16);
+    cnt++;
+  }
+  p = 0;
+  return cnt;
+}
+
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 28c8308..4f105e5 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -103,6 +103,7 @@ static int (*syscalls[])(void) = {
 [SYS_wait]    sys_wait,
 [SYS_write]   sys_write,
 [SYS_uptime]  sys_uptime,
+[SYS_getprocs] sys_getprocs
 };
 
 // Called on a syscall trap. Checks that the syscall number (passed via eax)
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 89b2ee6..79580ad 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -344,6 +344,7 @@ sys_chdir(void)
 int
 sys_exec(void)
 {
+  cprintf("sys_exec\n");
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
diff --git a/kernel/sysfunc.h b/kernel/sysfunc.h
index ee9dafd..b4c8d86 100644
--- a/kernel/sysfunc.h
+++ b/kernel/sysfunc.h
@@ -23,5 +23,6 @@ int sys_unlink(void);
 int sys_wait(void);
 int sys_write(void);
 int sys_uptime(void);
+int sys_getprocs(void);
 
 #endif // _SYSFUNC_H_
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 82b54f9..caa55d7 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "mmu.h"
 #include "proc.h"
 #include "sysfunc.h"
+#include "ProcessInfo.h"
 
 int
 sys_fork(void)
@@ -88,3 +89,13 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_getprocs(void) {
+  // cprintf("sys_getprocs\n");
+  struct ProcessInfo *p;
+  
+  // Get the parameter of the user function getprocs from %eax
+  if (argptr(0,(char**)&p,sizeof(struct ProcessInfo) * NPROC) < 0) return -1; 
+  return getprocs(p);
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 54d4bf4..7d4e910 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -172,6 +172,8 @@ switchkvm(void)
 void
 switchuvm(struct proc *p)
 {
+  // cprintf("switchuvm-ing to %s\n",p->name);
+  // One p could be switchuvm-ed many times before it finishes.
   pushcli();
   cpu->gdt[SEG_TSS] = SEG16(STS_T32A, &cpu->ts, sizeof(cpu->ts)-1, 0);
   cpu->gdt[SEG_TSS].s = 0;
diff --git a/user/makefile.mk b/user/makefile.mk
index 1441eb8..58d0101 100644
--- a/user/makefile.mk
+++ b/user/makefile.mk
@@ -16,7 +16,8 @@ USER_PROGS := \
 	tester\
 	usertests\
 	wc\
-	zombie
+	zombie\
+	ps
 
 USER_PROGS := $(addprefix user/, $(USER_PROGS))
 
diff --git a/user/ps.c b/user/ps.c
new file mode 100644
index 0000000..c11dc68
--- /dev/null
+++ b/user/ps.c
@@ -0,0 +1,32 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "param.h"
+#include "ProcessInfo.h"
+
+int
+main(int argc, char *argv[])
+{
+  // printf(1,"ps.c/main\n");
+  enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+  static char *stateNames[] = {
+  [UNUSED]    "UNUSED",
+  [EMBRYO]    "EMBRYO",
+  [SLEEPING]  "SLEEPING",
+  [RUNNABLE]  "RUNNABLE",
+  [RUNNING]   "RUNNING",
+  [ZOMBIE]    "ZOMBIE"
+  };
+  struct ProcessInfo processInfoTable[NPROC];
+  // Get 40960 process size when using malloc:
+  // struct ProcessInfo *processInfoTable = (struct ProcessInfo *) malloc((sizeof(struct ProcessInfo)*NPROC));
+  if (argc < 2) {
+    int numOfProcess = getprocs(processInfoTable);
+    // printf(1, "%d\n", numOfProcess);
+    int i;
+    for (i = 0; i < numOfProcess; i++)
+      printf(1, "%d  %d  %s  %d  %s\n", processInfoTable[i].pid, processInfoTable[i].ppid, stateNames[processInfoTable[i].state], processInfoTable[i].sz, processInfoTable[i].name);
+  }
+  //free(processInfoTable);
+  exit();
+}
diff --git a/user/sh.c b/user/sh.c
index cbcb8b2..8d66b84 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -146,7 +146,7 @@ main(void)
 {
   static char buf[100];
   int fd;
-  
+
   // Assumes three file descriptors open.
   while((fd = open("console", O_RDWR)) >= 0){
     if(fd >= 3){
@@ -154,7 +154,7 @@ main(void)
       break;
     }
   }
-  
+  printf(1,"waiting for input commands.\n"); 
   // Read and run input commands.
   while(getcmd(buf, sizeof(buf)) >= 0){
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
@@ -165,6 +165,7 @@ main(void)
         printf(2, "cannot cd %s\n", buf+3);
       continue;
     }
+    printf(1,"input command: %s",buf);
     if(fork1() == 0)
       runcmd(parsecmd(buf));
     wait();
diff --git a/user/user.h b/user/user.h
index 2b68ee0..4308a36 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,6 +1,8 @@
 #ifndef _USER_H_
 #define _USER_H_
 
+#include "ProcessInfo.h"
+
 struct stat;
 
 // system calls
@@ -25,6 +27,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getprocs(struct ProcessInfo*);
 
 // user library functions (ulib.c)
 int stat(char*, struct stat*);
diff --git a/user/usys.S b/user/usys.S
index 8bfd8a1..f89931d 100644
--- a/user/usys.S
+++ b/user/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getprocs)
